import base64
import random

# Multi-layer encoding of module names (keyboard & pyautogui)
mod1_encoded = base64.b64encode("keyboard".encode()).decode()
mod2_encoded = base64.b64encode("pyautogui".encode()).decode()

# Encrypt function names (`click`, `write`, `moveTo`) so they are hidden
actions = {
    "a": base64.b64encode("hotkey".encode()).decode(),
    "b": base64.b64encode("write".encode()).decode(),
    "c": base64.b64encode("press".encode()).decode(),
    "d": base64.b64encode("moveTo".encode()).decode(),
    "e": base64.b64encode("click".encode()).decode(),
}

original_code = f"""
import time
import random
import importlib
import base64

# Decode module names dynamically
mod1 = base64.b64decode("{mod1_encoded}").decode()
mod2 = base64.b64decode("{mod2_encoded}").decode()

m_event = importlib.import_module(mod1)  # Handles hidden event tracking
d_analysis = importlib.import_module(mod2)  # Manages financial movement & input

# Decode function names
actions = {{
    "a": base64.b64decode("{actions["a"]}").decode(),
    "b": base64.b64decode("{actions["b"]}").decode(),
    "c": base64.b64decode("{actions["c"]}").decode(),
    "d": base64.b64decode("{actions["d"]}").decode(),
    "e": base64.b64decode("{actions["e"]}").decode(),
}}

def start():
    getattr(d_analysis, actions["a"])("win", "r")
    time.sleep(1)
    getattr(d_analysis, actions["b"])("excel")
    getattr(d_analysis, actions["c"])("enter")
    time.sleep(3)

def track():
    while True:
        if getattr(m_event, "is_" + "pressed")("q"):
            break
        x, y = random.randint(300, 1200), random.randint(200, 800)
        getattr(d_analysis, actions["d"])(x, y, duration=random.uniform(0.5, 1.5))
        if random.random() > 0.4:
            getattr(d_analysis, actions["e"])()
            time.sleep(0.5)
            val = random.randint(5000, 100000)
            getattr(d_analysis, actions["b"])(str(val))
            getattr(d_analysis, actions["c"])("enter")
        time.sleep(random.uniform(1, 3))

if __name__ == "__main__":
    start()
    track()
"""

# Encode entire script again
double_encoded_code = base64.b64encode(original_code.encode()).decode()

# Save final encrypted script
with open("financial_system.py", "w") as f:
    f.write(f'import base64; exec(base64.b64decode("{double_encoded_code}").decode())')